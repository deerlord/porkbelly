pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
-- BUGS
-- FIXED: recoil from shooting into walls is huge
--  due to vx math, divide vx/2 to fix; still allows bounce off wall
-- bullets disappear/reappear ??
-- FIXED: double jump height if in corner by wall
--   possibly due to double +JUMP math
--   semi-fixed, still bugged at very corner
-- FIXED: wall jump x too high when launched
--   fixed; needs review; looks good

-- TO DO
-- input handling; improved facing for diagonalsz
--   extend X_INPUT and Y_INPUT for diagonals
--   determine integer values for diagonals; 5-8

-- GLOBALS
SPRITE_FLAG_RED = 0
SPRITE_FLAG_ORANGE = 1
SPRITE_FLAG_YELLOW = 2
SPRITE_FLAG_GREEN = 3
SPRITE_FLAG_BLUE = 4
SPRITE_FLAG_PURPLE = 5
SPRITE_FLAG_PINK = 6
SPRITE_FLAG_TAN = 7
TICK = 0
JUMP = -3.5
GRAV = .2
AIR_DRAG = .99
FRICTION = .90
PLAYER_SPEED = .15
MAX_SPEED = 2.5
RECOIL = .25
X_INPUT = {-1,1,0,0}--,-1,1,-1,1}
Y_INPUT = {0,0,1,-1}--,-1,-1,1,1}
LAST_BITFIELD = nil
-- 000101; int 5, up/left
-- 000110; int 6, up/right
-- 001001; int 9, down/left
-- 001010; int 10, down/right
BULLETS = {}
MOBS = {}

--helpers
function r_sgn(value)
  return (value != 0 and sgn(value) or 0)
end

-- loop functions
function _init()
  debug = {}
  player = new_character(40,50)
  MOBS[1] = player
end

function update_bullets()
  for i=1,#BULLETS do
    if BULLETS[i] != nil then
      if BULLETS[i].spent == true then
        add(delete, i)
      elseif BULLETS[i].hit == true then
        BULLETS[i].spent = true
      else
        BULLETS[i].hit = not bullet_move(BULLETS[i])
      end
    end
  end
end

-- add mob collision and shit
function update_mobs()
  for mob in all(MOBS) do
    character_update(mob)
  end
end

function _update()
  TICK = TICK % 30 + 1
  button_handler()
  update_bullets()
  update_mobs()
end

function _draw()
  cls(0)
  map()
  for i=#MOBS,1,-1 do
    character_draw(MOBS[i])
  end
  for bullet in all(BULLETS) do
    bullet_draw(bullet)
  end
  for txt in all(debug) do
    print(txt)
  end
end

-- input
function input_left_right(inp)
  local player_speed = X_INPUT[inp]*PLAYER_SPEED
  player.flip = (inp == 1) and true or false
  if player.ysp == 0 then
    player.xsp += player_speed
  else
    player.xsp += player_speed/4
  end
  player.facing = inp
  -- cap speed
  player.xsp = r_sgn(player.xsp)*min(7, abs(player.xsp))
end

function input_left_right_new(inp)
  -- inp can be 1 or 2
  local speed = X_INPUT[inp]*PLAYER_SPEED
  player.flip = (inp == 1 and true or false)
  player.xsp += speed*(r_sgn(speed) == r_sgn(speed) and 1 or .1)
end

function button_handler()
  -- bitfield mapping
  -- BADURL
  -- AND mask; b001111 15
  -- 000001; int 1, facing left
  -- 000010; int 2, facing right
  -- 000100; int 4, facing up
  -- 000101; int 5, up/left
  -- 000110; int 6, up/right
  -- 001000; int 8, facing down
  -- 001001; int 9, down/left
  -- 001010; int 10, down/right
  local bitfield = btn()
  local facing = band(bitfield, 15)
  local dpad_up = shr(band(bitfield, 4), 2)
  local dpad_down = shr(band(bitfield, 8), 3)
  local button_a = shr(band(bitfield, 16), 4)
  local button_b = shr(band(bitfield, 32), 5)

  --
  local left_right = band(bitfield, 3)
  if left_right > 0 then
    input_left_right_new(left_right)
  end
  if dpad_up == 1 then
      player.facing = 4
      -- handle 'clearing' jump
      if band(LAST_BITFIELD, 4) == 0 then
        character_jump(player)
      end
  end
  if dpad_down == 1 then
     player.facing = 3
  end
  if button_a == 1 then
    character_attack(player)
  end
  if button_b == 1 then
    -- button b handler
  end
  LAST_BITFIELD = bitfield
end

-- map
-- basic collision functions
function collision_coords(ox, oy, dx, dy)
  -- basic math; calculate the new position for collision
  return ox + dx, oy + dy
end

function dist(fx,fy,tx,ty)
  -- distance between two points
  local dx,dy=fx-tx,fy-ty
  return sqrt(dx*dx+dy*dy)
end

function collide(ox, oy, ob, cx, cy, cb)
  -- check if hitboxes of two items overlap
  -- return true/false
  return ob+cb > dist(ox, oy, cx, cy) and true or false
end

-- use dist() to make this happen more better?
function collide_map(ox, oy, dx, dy, mask)
  -- red sprite flag
  local x,y = collision_coords(ox, oy, dx, dy)
  mask = (mask == nil and 0 or mask)
  return fget(
    mget(flr(x/8),flr(y/8)),
    mask
  )
end

function character_collide_map(obj, mask)
  local x,y = collision_coords(obj.x, obj.y, obj.xsp, obj.ysp)
  for i=1,4 do
    if collide_map(x, y, X_INPUT[i]*(obj.hitbox+1), Y_INPUT[i]*obj.hitbox-1, mask) then
      return true
    end
  end
end

function character_on_ground(obj)
  --return character_collide_map(obj, 0, obj)
  return collide_map(obj.x, obj.y, 0, 1 + obj.hitbox, SPRITE_FLAG_RED)
end

-- character class
function new_character(x, y)
   return {
     x = x,
     y = y,
     xsp = 0,
     ysp = 0,
     hitbox = 4,
     frame = 1,
     cooldown = 0,
     facing = 2,
     flip = false
   }
end

function character_update(obj)
  --obj.ysp = min(obj.ysp + GRAV, 8) -- inline gravity
  physics_gravity(obj, 1)
  if obj.ysp < 0 and obj.ysp > -4 then
    physics_air_drag(obj)
  end
  physics_friction(obj)
  character_move(obj)
end

function physics_air_drag(obj)
    if abs(obj.xsp) >= 0.125  then
      obj.xsp = obj.xsp*AIR_DRAG
    end
end

function physics_gravity(obj, coefficient)
  if coefficient == nil then
    coefficient = 1
  end
  obj.ysp = min(obj.ysp + GRAV/coefficient, 8)
end

function physics_friction(obj)
  if character_on_ground(obj) and obj.xsp != 0 then
    if obj.ysp > GRAV then
      local x,y = vector(obj.xsp, obj.ysp)
      obj.xsp = obj.xsp*(FRICTION^(y*10))
    end
    obj.xsp = obj.xsp*FRICTION
  elseif character_on_wall(obj) and obj.ysp != GRAV then
    obj.flip = not obj.flip
    if obj.ysp < 0 then
      local x,y = vector(obj.xsp, obj.ysp)
      obj.ysp = obj.ysp*FRICTION^(x*5)
    end
    obj.xsp = 0
    obj.ysp = obj.ysp*FRICTION
  end
end

function character_on_wall(obj)
  return collide_map(obj.x, obj.y, r_sgn(obj.xsp)*4, 0)
end

--[[
function character_friction(obj)
  -- no friction if not moving
  if character_on_ground(obj) and obj.xsp != 0 then
    -- handle impact from landing
    if obj.ysp > GRAV then
      local x,y = vector(obj.xsp, obj.ysp)
      -- downward trajectory
      obj.xsp = obj.xsp*(FRICTION^(y*10))
    end
    obj.xsp = obj.xsp*FRICTION
  end
end
]]--

function vector(x, y)
  local hypotenuse = sqrt(x*x+y*y)
  if hypotenuse == 0 then
    return 0, 0
  end
  return x/hypotenuse, y/hypotenuse
end

function character_move(obj)
  if obj.ysp > 0 and character_on_ground(obj) then
    obj.ysp = 0
    obj.facing = obj.flip and 1 or 2
  end
  local vx,vy = vector(obj.xsp, obj.ysp)
  while collide_map(
    obj.x,
    obj.y,
    obj.xsp+r_sgn(obj.xsp)*(obj.hitbox-1),
    obj.ysp+r_sgn(obj.ysp)*(obj.hitbox)
  ) do
    obj.xsp -= vx/2
    obj.ysp -= vy/2
  end
  -- set maximum velocity
  -- does not quite work as expected
  -- has negative impacts on  jumps
  --[[
  if sqrt(obj.xsp^2+obj.ysp^2) > MAX_SPEED then
    local vx,vy =  vector(obj.xsp, obj.ysp)
    obj.xsp = vx*MAX_SPEED
    obj.ysp = vy*MAX_SPEED
    -- cap out xsp/ysp
  end
  ]]--
  obj.x += obj.xsp
  obj.y += obj.ysp
end

-- actions
function character_jump(obj)
  -- obj.cooldown; stops jumping in the middle of actions
  if obj.cooldown == 0 then
    -- check wall collision  first, if  so, wall jump
    if character_on_wall(obj) then
      obj.ysp += JUMP*.5
      obj.xsp += (obj.flip and 2 or -2)
      return true
    -- else make sure we're  on the ground, jump up
    elseif obj.ysp == 0 then
      obj.ysp = JUMP
      return true
    end
  end
  return false
end

-- not implemented
function character_dodge(obj)
  obj.xsp = X_INPUT[obj.facing]*7
end

-- shoot a bullet
function character_attack(obj)
  -- no other action on CD
  if obj.cooldown == 0 then
    sfx(0)
    -- spawn bullet
    local bullet = new_bullet(obj)
    add(BULLETS, bullet)
    -- set start frame
    obj.frame = 5
    -- push back/recoil
    obj.xsp -= r_sgn(X_INPUT[obj.facing])*RECOIL

    obj.ysp -= r_sgn(X_INPUT[obj.facing])*RECOIL
    obj.cooldown = 12
  end
end

-- draws
function character_frame(obj)
  if obj.cooldown == 0 then
    obj.frame = 1
  end
  return flr(TICK/4)%4 + obj.frame
end

function character_draw(obj)
  palt(15,true)
  spr(
    character_frame(obj),
    player.x - 4,
    player.y - 4,
    1,
    1,
    player.flip
  )
  pal()
  obj.cooldown = max(obj.cooldown - 1, 0)
end

-- bullet class
function new_bullet(obj)
  --local y_inp = Y_INPUT[obj.facing]
  return {
      --owner = obj, -- not needed?
      x = obj.x,
      y = obj.y,
      xsp = X_INPUT[obj.facing]*3,
      ysp = Y_INPUT[obj.facing]*3 + min(.75*Y_INPUT[obj.facing],0),
      hit = false,
      spent = false
  }
end

-- methods
-- implement new version that uses less gravity calculations
-- more yspd on up shots?
-- we sort of did it
function bullet_move(obj)
  -- implement gravity if bullet is slow enough
  -- don't implement gravity on vertical shots
  local coefficient = 1000000
  if abs(obj.xsp) < 2.5 and abs(obj.xsp) != 0 then
    coefficient = abs(obj.xsp)^2/4
  elseif obj.ysp != 0 then
    coefficient = abs(obj.ysp)
  end
  physics_gravity(obj, coefficient)--obj.ysp = min(obj.ysp + GRAV/coefficient, 8)
  if not collide_map(obj.x, obj.y, obj.xsp, obj.ysp) then
    physics_air_drag(obj)
    obj.x += obj.xsp
    obj.y += obj.ysp
    return true
  end
  sfx(20) -- bullet collision
  return false
end

-- draws
function bullet_draw(obj)
  palt(15,true)
  palt(8,not obj.hit)
  palt(9,not obj.spent)
  spr(20, obj.x-4, obj.y-4, 1, 1)--, r_sgn(obj.xsp) == -1, r_sgn(obj.ysp) == -1)
  pal()
end


__gfx__
00000000fffefefffffffffffffefefffffffffffefeffffefeffffffefefffffefeffffffeffeffffffffffffeffefffffffffffefeffffefeffffffeffefff
00000000ff8eeefffffefeffff8eeefffffefefffeeeffffeeeffffffeeefffffeeeffffffeeeeffffeffeffffeeeeffffeffefffeeeffffeeeffffffeeeef6f
00700700fff87eeefffeeefffff87eeef88eeeff8e7eeeff87eeefff8e7eeeff8e7eeeffffe7e7efffeeeefffe7e7effffeeeeff8e7eeeff87eeeffff8888f6f
00077000fff8eeeeff887eeefff8eeeefff87eeef8eeeeff8eeeef6ff8eeeefff8eeeeffffeeeeeff8e7e7effeeeeefffe7e7efff8eeeeff8eeeef6ff000086f
00077000ffc000fffff8eeeefc0000fffc0eeeeecc00cf66cc0f66ffcc00cf66cc00cf66ff8800ffff8eeeeff88800fffeeeeeffcc00cf66cc0f66fffccccfef
00700700fcc044fffcc000ffcc0444ffcc0000fffc4ce6ffc4ce6ffffc4ce6fffc4ce6fffc4444cfec4444cffc4444cffc8844cefc4ce6ffc4ce6ffffccccc6f
00000000fec044fffec044ffec0444feec0444fef4ccfeffcc4feffff4ccfefff4ccfeffff4444efff4444fefe4444ffef4444fff4ccfeffcc4feffffccccfff
00000000fff55fffffc005fffff55fffff5ff5ff55ff5fff5ff5ffff55ff5fff55ff5fffff5fffffff55fffffffff5ffffff55ff55ff5fff5ff5fffff5f55fff
ffffffffffeffeffffeeeeffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
feffeff6ffeeeeffff7e7efffffffeffffff8fff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
feeee8f6ff7e7eff6feeeeffff8feffeff8fff8f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f8888f6ff8eeeefff68880ffff88eeefffff9fff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f0000feff68880fff6c4ccffeccc8e7ef8f9a9f80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fccccc6ffe444cfffec4ccfffcccceeeffff9fff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fccccfffffecccffffccccffffccc4ffff8fff8f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f5ff55ffff5f55fff55ff5fff5fff5ffffff8fff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064430300000000066566666666000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044330030000000666656666646600000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043003030000006644444544444660000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030300300000066445444444534466000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003030000000664433333333333446600
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000006644303030303003344660
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030300000066443003000303030334466
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000664430300303000030033446
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101
__map__
000000ff0000000000000000fe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fe00000000000000fdfefeff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fe000000000000fdfc000000ff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fe0000fdfefefefc0000000000ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fefefefc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00010000043200235005330076300562004620026100261014000130001200012000110001100011000110001200013000150001700018000190001a0001a0000000000000000000000000000000000000000000

